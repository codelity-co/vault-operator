apiVersion: charts.helm.k8s.io/v1alpha1
kind: Vault
metadata:
  name: example-vault
spec:
  # Default values copied from <project_dir>/helm-charts/vault/values.yaml
  
  global:
    enabled: true
    imagePullSecrets: []
    openshift: false
    tlsDisable: true
  injector:
    affinity: null
    agentImage:
      repository: vault
      tag: 1.4.2
    authPath: auth/kubernetes
    certs:
      caBundle: ""
      certName: tls.crt
      keyName: tls.key
      secretName: null
    enabled: true
    externalVaultAddr: ""
    extraEnvironmentVars: {}
    image:
      pullPolicy: IfNotPresent
      repository: hashicorp/vault-k8s
      tag: 0.4.0
    logFormat: standard
    logLevel: info
    namespaceSelector: {}
    nodeSelector: null
    priorityClassName: ""
    resources: {}
    revokeOnShutdown: false
    tolerations: null
  server:
    affinity: |
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: {{ template "vault.name" . }}
                app.kubernetes.io/instance: "{{ .Release.Name }}"
                component: server
            topologyKey: kubernetes.io/hostname
    annotations: {}
    auditStorage:
      accessMode: ReadWriteOnce
      enabled: false
      size: 10Gi
      storageClass: null
    authDelegator:
      enabled: true
    dataStorage:
      accessMode: ReadWriteOnce
      enabled: true
      size: 10Gi
      storageClass: null
    dev:
      enabled: false
    extraArgs: ""
    extraContainers: null
    extraEnvironmentVars: {}
    extraInitContainers: null
    extraLabels: {}
    extraSecretEnvironmentVars: []
    extraVolumes: []
    ha:
      config: |
        ui = true
  
        listener "tcp" {
          tls_disable = 1
          address = "[::]:8200"
          cluster_address = "[::]:8201"
        }
        storage "consul" {
          path = "vault"
          address = "HOST_IP:8500"
        }
  
        service_registration "kubernetes" {}
  
        # Example configuration for using auto-unseal, using Google Cloud KMS. The
        # GKMS keys must already exist, and the cluster must have a service account
        # that is authorized to access GCP KMS.
        #seal "gcpckms" {
        #   project     = "vault-helm-dev-246514"
        #   region      = "global"
        #   key_ring    = "vault-helm-unseal-kr"
        #   crypto_key  = "vault-helm-unseal-key"
        #}
      disruptionBudget:
        enabled: true
        maxUnavailable: null
      enabled: false
      raft:
        config: |
          ui = true
  
          listener "tcp" {
            tls_disable = 1
            address = "[::]:8200"
            cluster_address = "[::]:8201"
          }
  
          storage "raft" {
            path = "/vault/data"
          }
  
          service_registration "kubernetes" {}
        enabled: false
        setNodeId: false
      replicas: 3
    image:
      pullPolicy: IfNotPresent
      repository: vault
      tag: 1.4.2
    ingress:
      annotations: {}
      enabled: false
      hosts:
      - host: chart-example.local
        paths: []
      labels: {}
      tls: []
    livenessProbe:
      enabled: false
      initialDelaySeconds: 60
      path: /v1/sys/health?standbyok=true
    nodeSelector: null
    postStart: []
    preStopSleepSeconds: 5
    priorityClassName: ""
    readinessProbe:
      enabled: true
    resources: {}
    route:
      annotations: {}
      enabled: false
      host: chart-example.local
      labels: {}
    service:
      annotations: {}
      enabled: true
      port: 8200
      targetPort: 8200
    serviceAccount:
      annotations: {}
    shareProcessNamespace: false
    standalone:
      config: |
        ui = true
  
        listener "tcp" {
          tls_disable = 1
          address = "[::]:8200"
          cluster_address = "[::]:8201"
        }
        storage "file" {
          path = "/vault/data"
        }
  
        # Example configuration for using auto-unseal, using Google Cloud KMS. The
        # GKMS keys must already exist, and the cluster must have a service account
        # that is authorized to access GCP KMS.
        #seal "gcpckms" {
        #   project     = "vault-helm-dev"
        #   region      = "global"
        #   key_ring    = "vault-helm-unseal-kr"
        #   crypto_key  = "vault-helm-unseal-key"
        #}
      enabled: '-'
    tolerations: null
    updateStrategyType: OnDelete
  ui:
    annotations: {}
    enabled: false
    externalPort: 8200
    serviceNodePort: null
    serviceType: ClusterIP
  
